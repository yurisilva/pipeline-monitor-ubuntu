[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "pipeline-monitor"
version = "0.1.0"
description = "System tray app for monitoring CI/CD pipeline status"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    # Will be added as needed via dependency-manager agent
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "pip-audit>=2.6.0",
]

[tool.ruff]
# Line length - Black/Ruff default
line-length = 88

# Target Python 3.10+
target-version = "py310"

# Enable common rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (commented-out code)
]

# Ignore certain rules
ignore = [
    "E501",  # Line too long (handled by formatter)
]

# Exclude directories
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "ARG",  # Allow unused arguments in tests
    "S101", # Allow assert in tests
]

[tool.mypy]
# Strict type checking
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

# Output
show_error_codes = true
show_error_context = true
pretty = true

# Exclude patterns
exclude = [
    "^build/",
    "^dist/",
    "^\\.venv/",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output options
addopts = [
    "-v",                    # Verbose
    "--strict-markers",      # Strict marker usage
    "--tb=short",           # Short traceback format
    "--cov=.",              # Coverage for current directory
    "--cov-report=term-missing",  # Show missing lines
    "--cov-report=html",    # Generate HTML report
    "--cov-branch",         # Branch coverage
]

# Coverage options
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    ".venv/*",
    "venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
# Fail if coverage is below 90%
fail_under = 90
precision = 2
show_missing = true
skip_covered = false

exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = [
    "tests",
    ".venv",
    "venv",
]
skips = [
    "B101",  # Allow assert statements (handled by test framework)
]
